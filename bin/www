#!/usr/bin/env node
"use strict";

//module dependencies
var server = require("../dist/server");
var debug = require("debug")("express:server");
var http = require("http");
var SocketServer = require('ws').Server;

//create http server
var httpPort = normalizePort(process.env.PORT || 8080);
let s = server.Server.bootstrap();
var app = s.app;
app.set("port", httpPort);
s.httpServer = new http.createServer(app);

//listen on provided ports
s.httpServer.listen(httpPort);

//add error handler
s.httpServer.on("error", onError);

//start listening on port
s.httpServer.on("listening", onListening);

s.wss = new SocketServer({ server });

s.configSocket(s.httpServer);

// var wss = new WebSocket.Server({
//   server: httpServer
// });
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = s.httpServer.address();
  console.log(addr);
  var bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}